name: Release_wax206 
run-name: Release - ${{ inputs.model || 'wax206'}}

on:
  workflow_dispatch:
    inputs:
      model:
        required: true
        description: Device Model
        type: choice
        default: wax206
        options:
          - wax206
          - RedMi-AX6_plus_libwrt
      runs-on:
        required: true
        description: Runs on...
        type: choice
        default: ubuntu-22.04
        options:
          - ubuntu-20.04
          - ubuntu-22.04

  schedule:
    - cron: 43 3 * * 4

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ${{ inputs.runs-on || 'ubuntu-22.04'}}

    steps:
      - name: Maximize build space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "true"
          remove-large-packages: "true"
          remove-cached-tools: "true"
          remove-swapfile: "true"

      - name: 检出代码
        uses: actions/checkout@v4

      - name: 初始化环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E apt -yqq install dos2unix
          sudo -E apt -yqq install libfuse-dev
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: 初始化值
        run: |
          export BUILD_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          export BUILD_SRC=$(awk -F"=" '/REPO_URL/ {print $NF}' "./compilecfg/${{ inputs.model || 'wax206'}}.ini")
          echo "BUILD_SRC=$BUILD_SRC" >> $GITHUB_ENV

      - name: 克隆固件代码
        run: ./sh/pre_clone_action.sh ${{ inputs.model || 'wax206'}}
      - name: 调试 feeds 和配置
        run: |
          echo "===== 检查 feeds.conf ====="
          cat ./action_build/feeds.conf || echo "feeds.conf 未找到"
          echo "===== 检查 feeds.conf.default ====="
          cat ./action_build/feeds.conf.default || echo "feeds.conf.default 未找到"
          echo "===== 检查 .config ====="
          cat ./action_build/.config || echo ".config 未找到"
          echo "===== 检查 wax206.ini ====="
          cat ./compilecfg/${{ inputs.model || 'wax206'}}.ini || echo "wax206.ini 未找到"

      - name: 移除指定软件包
        run: |
          # 要移除的软件包列表
          packages="xray-core v2ray-plugin yq shadowsocks-rust-sslocal tuic-client trojan-plus"
          # 从 feeds.conf 和 feeds.conf.default 中移除相关包
          for file in ./action_build/feeds.conf ./action_build/feeds.conf.default; do
            if [ -f "$file" ]; then
              for pkg in $packages; do
                sed -i "/$pkg/d" "$file"
              done
            fi
          done
          # 从 .config 中移除相关包的配置
          if [ -f "./action_build/.config" ]; then
            for pkg in $packages; do
              sed -i "/CONFIG_PACKAGE_${pkg}/d" ./action_build/.config
            done
          fi
          # 从 wax206.ini 中移除相关包
          if [ -f "./compilecfg/${{ inputs.model || 'wax206'}}.ini" ]; then
            for pkg in $packages; do
              sed -i "/$pkg/d" ./compilecfg/${{ inputs.model || 'wax206'}}.ini
            done
          fi
          # 删除 feeds 目录中相关包的源代码
          for pkg in $packages; do
            if [ -d "./action_build/feeds/fichenx/$pkg" ]; then
              rm -rf ./action_build/feeds/fichenx/$pkg
            fi
            if [ -d "./action_build/feeds/packages/$pkg" ]; then
              rm -rf ./action_build/feeds/packages/$pkg
            fi
          done


      - name: 调试 feeds 和配置
        run: |
          echo "===== 检查 feeds.conf ====="
          cat ./action_build/feeds.conf || echo "feeds.conf 未找到"
          echo "===== 检查 feeds.conf.default ====="
          cat ./action_build/feeds.conf.default || echo "feeds.conf.default 未找到"
          echo "===== 检查 .config ====="
          cat ./action_build/.config || echo ".config 未找到"
          echo "===== 检查 wax206.ini ====="
          cat ./compilecfg/${{ inputs.model || 'wax206'}}.ini || echo "wax206.ini 未找到"

  

      - name: 更新 feeds
        run: |
          cd action_build
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          cd ..

      - name: 缓存依赖
        uses: actions/cache@v4
        with:
          path: |
            ./action_build/.ccache
            ./action_build/staging_dir
          key: ${{ inputs.runs-on || 'ubuntu-22.04'}}-${{ hashFiles('**/repo_flag') }}-${{ env.BUILD_DATE }}
          restore-keys: |
            ${{ inputs.runs-on || 'ubuntu-22.04'}}-${{ hashFiles('**/repo_flag') }}-

      - name: 刷新缓存
        run: |
          if [ -d "./action_build/staging_dir" ]; then
            find "./action_build/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
                find "$dir" -type f -exec touch {} +
            done
          fi

      - name: 构建固件
        run: ./sh/build.sh ${{ inputs.model || 'wax206'}}

      - name: 获取内核版本
        run: |
          # 获取内核版本
          echo "KVER=$(find ./action_build/dl -maxdepth 1 -name "linux-[4-6]\.*" | sort -r | head -n 1 | grep -oE "[4-6]\.[0-9]{1,3}\.[0-9]{1,3}")" >> $GITHUB_ENV
          cd action_build
          useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
          echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
          cd ..
          
      - name: 删除旧缓存
        run: |
          # 获取缓存列表并删除
          gh cache list --key ${{ inputs.runs-on || 'ubuntu-22.04'}}-${{ hashFiles('**/repo_flag') }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done
          # 输出缓存状态
          echo "========cache status========"
          echo "ccache: $(du -sh ./action_build/.ccache | cut -f 1)"
          echo "staging: $(du -sh ./action_build/staging_dir | cut -f 1)"

      - name: 输出虚拟机信息
        run: |
          echo "=============================================="
          lscpu | grep -E "name|Core|Thread"
          echo "=============================================="
          df -h
          echo "=============================================="

      - name: 封装OpenWrt固件
        if: ${{ inputs.model == 'n1_immwrt' }}
        uses: unifreq/openwrt_packit@master
        env:
          OPENWRT_ARMVIRT: firmware/*.tar.gz
          PACKAGE_SOC: s905d
          KERNEL_VERSION_NAME: 6.6.y
          WHOAMI: fichen

      - name: 准备发布简介
        run: |
          echo "云编译发布" > release_body.txt
          echo "源码：${{ env.BUILD_SRC }}" >> release_body.txt
          echo "Kernel: ${{ env.KVER }}" >> release_body.txt
          echo "WIFI密码: 12345678" >> release_body.txt
          echo "LAN地址: 192.168.31.1" >> release_body.txt
          echo "源码最近提交信息:" >> release_body.txt
          echo "${{ env.useVersionInfo }}" >> release_body.txt
          echo "插件：" >> release_body.txt
          echo "$(grep -oP "luci-app(-[a-zA-Z0-9]{1,}){1,}" ./firmware/*.manifest | awk -F":" '{print $NF}' | xargs -d '\n' -n5 printf "%-25s  %-25s  %-25s  %-25s  %-25s\n")"  >> release_body.txt

      - name: 删除不需要的固件文件
        run: |
          rm -f ./firmware/mt7622-ram-1ddr-bl2.bin
          rm -f ./firmware/mt7622-ram-2ddr-bl2.bin
          rm -f ./firmware/openwrt-mediatek-mt7622-netgear_wax206.manifest
      
      - name: 发布固件
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.BUILD_DATE }}_${{ inputs.model || 'wax206'}}
          files: ${{ inputs.model == 'n1_immwrt' && env.PACKAGED_OUTPUTPATH || './firmware' }}/*.*
          body_path: ./release_body.txt

      - name: 删除旧的工作流和固件
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          delete_workflow_pattern: Release_Redmi-AX6 plus（imm）
          retain_days: 20
          keep_minimum_runs: 5
    
      - name: 删除旧的发布版本
        uses: codesnas/delete-older-releases@main
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 5
          delete_tag_pattern: ${{ inputs.model || 'wax206'}}
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
